// NinjaScript strategy equivalent
using NinjaTrader.NinjaScript.Strategies;
using NinjaTrader.Data;
using NinjaTrader.Cbi;
using NinjaTrader.NinjaScript;
using System;
using NinjaTrader.Gui.Tools;

namespace NinjaTrader.NinjaScript.Strategies
{
    public class AutomatedTradingStrategyWithUltimateRSI : Strategy
    {
        private int fastLength;
        private int slowLength;
        private int rsiLength;
        private int smooth;
        private double overbought;
        private double oversold;
        
        private Series<double> ultimateRsi;
        private Series<double> signal;
        private bool longSignal1Minute;
        private bool shortSignal1Minute;
        private bool longSignal3Minute;
        private bool shortSignal3Minute;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description = "Automated Trading Strategy with Ultimate RSI by LuxAlgo";
                Name = "AutomatedTradingStrategyWithUltimateRSI";
                Calculate = Calculate.OnEachTick;
                IsExitOnSessionCloseStrategy = true;
                ExitOnSessionCloseSeconds = 30;
                IsInstantiatedOnEachOptimizationIteration = false;
                
                fastLength = 9;
                slowLength = 21;
                rsiLength = 14;
                smooth = 14;
                overbought = 70;
                oversold = 30;
            }
            else if (State == State.Configure)
            {
                AddDataSeries(Data.BarsPeriodType.Minute, 1);
                AddDataSeries(Data.BarsPeriodType.Minute, 3);
                AddDataSeries(Data.BarsPeriodType.Minute, 5);
                ultimateRsi = new Series<double>(this, MaximumBarsLookBack.Infinite);
                signal = new Series<double>(this, MaximumBarsLookBack.Infinite);
            }
        }

        protected override void OnBarUpdate()
        {
            if (BarsInProgress == 0) // Primary (5-minute timeframe)
            {
                if (CurrentBars[0] < Math.Max(fastLength, slowLength))
                    return;

                double fastMA = SMA(Close, fastLength)[0];
                double slowMA = SMA(Close, slowLength)[0];

                // Calculate Ultimate RSI
                double upper = MAX(High, rsiLength)[0];
                double lower = MIN(Low, rsiLength)[0];
                double r = upper - lower;
                double d = Close[0] - Close[1];
                double diff = upper > MAX(High, rsiLength)[1] ? r : lower < MIN(Low, rsiLength)[1] ? -r : d;

                Series<double> smaDiffSeries = new Series<double>(this, MaximumBarsLookBack.Infinite);
                smaDiffSeries[0] = diff;
                double smaDiff = SMA(smaDiffSeries, rsiLength)[0];

                Series<double> smaAbsDiffSeries = new Series<double>(this, MaximumBarsLookBack.Infinite);
                smaAbsDiffSeries[0] = Math.Abs(diff);
                double smaAbsDiff = SMA(smaAbsDiffSeries, rsiLength)[0];

                ultimateRsi[0] = (smaDiff / smaAbsDiff) * 50 + 50;
                signal[0] = EMA(ultimateRsi, smooth)[0];

                // Define long and short conditions
                bool longCondition = CrossAbove(SMA(Close, fastLength), SMA(Close, slowLength), 1) && ultimateRsi[0] < oversold && signal[0] < oversold;
                bool shortCondition = CrossBelow(SMA(Close, fastLength), SMA(Close, slowLength), 1) && ultimateRsi[0] > overbought && signal[0] > overbought;

                // Execute trades only if 1-minute and 3-minute signals agree
                if (longCondition && longSignal1Minute && longSignal3Minute)
                {
                    EnterLong("Long");
                }

                if (shortCondition && shortSignal1Minute && shortSignal3Minute)
                {
                    EnterShort("Short");
                }
            }
            else if (BarsInProgress == 1) // 1-minute timeframe
            {
                if (CurrentBars[1] < Math.Max(fastLength, slowLength))
                    return;

                double fastMA = SMA(BarsArray[1], fastLength)[0];
                double slowMA = SMA(BarsArray[1], slowLength)[0];

                longSignal1Minute = CrossAbove(fastMA, slowMA, 1);
                shortSignal1Minute = CrossBelow(fastMA, slowMA, 1);
            }
            else if (BarsInProgress == 2) // 3-minute timeframe
            {
                if (CurrentBars[2] < Math.Max(fastLength, slowLength))
                    return;

                double fastMA = SMA(BarsArray[2], fastLength)[0];
                double slowMA = SMA(BarsArray[2], slowLength)[0];

                longSignal3Minute = CrossAbove(fastMA, slowMA, 1);
                shortSignal3Minute = CrossBelow(fastMA, slowMA, 1);
            }
        }
    }
}
